apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'

version = '1.0.0'
group = 'com.linkedin'
ext.archivesBaseName = 'gradle-dustjs-plugin'
ext.isSnapshot = version.endsWith("-SNAPSHOT")

def authUsername = hasProperty('sonatypeUsername') ? sonatypeUsername : ''
def authPassword = hasProperty('sonatypePassword') ? sonatypePassword : ''

repositories {
  mavenCentral()
}

dependencies {
  groovy localGroovy()
  compile gradleApi()
  compile 'org.mozilla:rhino:1.7R4'
  testCompile ('org.spockframework:spock-core:0.6-groovy-1.8') {
    exclude module: "junit-dep"
    exclude module: "groovy-all"
  }
}

task sourceJar(type: Jar) {
  description = 'An archive of the source code for Maven Central'
  classifier = 'sources'
  from sourceSets.main.groovy
}

task groovydocJar(type: Jar) {
  description = 'An archive of the GroovyDocs for Maven Central'
  classifier = 'javadoc'
  from groovydoc
}

artifacts {
  archives groovydocJar, sourceJar
}

signing {
  sign configurations.archives
}

// Only *require* signing if we are uploading a non snapshot version
gradle.taskGraph.whenReady { taskGraph ->
  tasks.withType(org.gradle.plugins.signing.Sign).all {
    required = taskGraph.hasTask(":uploadArchives") && !isSnapshot
  }
}

install.repositories.mavenInstaller {
  pom.project(pomConfiguration)
  if (signing.signatory) {
    beforeDeployment { signing.signPom(it) }
  }
}

uploadArchives {
  repositories.mavenDeployer {
    if (signing.signatory) {
      beforeDeployment { signing.signPom(it) }
    }
    name = 'mavenCentralReleaseDeployer'
    repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
      authentication(userName: authUsername, password: authPassword)
      releases(updatePolicy: 'always')
      snapshots(updatePolicy: 'always')
    }
    pom.project(pomConfiguration)
  }
}

/**
 * Create POM config and return for use by other tasks.
 */
def getPomConfiguration() {
  return {
    name 'Gradle Dust.js Plugin'
    packaging 'jar'
    description 'A Gradle plugin for compiling Dust.js files.'
    url 'https://github.com/davidzchen/gradle-dustjs-plugin'
    licenses {
      license {
        name 'The Apache Software License, Version 2.0'
        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        distribution 'repo'
      }
    }
    developers {
      developer {
        id 'davidzchen'
        name 'David Z. Chen'
        email 'dchen@linkedin.com'
      }
    }
    scm {
      connection 'scm:git://github.com/davidzchen/gradle-dustjs-plugin.git'
      developerConnection 'scm:git@github.com:davidzchen/gradle-dustjs-plugin.git'
      url 'https://github.com/davidzchen/gradle-dustjs-plugin'
    }
  }
}
